package com.cs410.finalproject.operations;

import com.cs410.finalproject.models.Grammar;
import com.cs410.finalproject.models.State;

/**
 * @author Brian Hudi
 *The class that generates the CYK table and checks to see if the given
 *string can be generated by the grammar.
 */
public class CKYParser {

	/**
	 * @author Brian Hudi
	 * @param input the string that you are checking to see can be generated by the grammar.
	 * @param chomskyGrammar the grammar in chomsky normal form.
	 */
	private String checkInput(String input, Grammar chomskyGrammar)
	{
		int n = input.length();
		String p[][] = new String[n+1][n+1];

		for(int i = 0; i <= n; i++)
		{
			for(int j = 0; j <= n; j++)
			{
				p[i][j] = "";
			}
		}

		//step 1 of the algorithm
		//i have tested this multiple times and i believe all of this logic is correct.
		for(int i = 1; i <= n; i++) 
		{
			for(State state : chomskyGrammar.getStates())
			{
				for(int j = 0; j < state.getDerivations().size(); j++)
				{
					if(state.getDerivations().get(j).contains(input.charAt(i-1) + ""))
					{
						p[1][i] = p[1][i] + state.getNonTerminal() + " ";
					}
				}
			}
		}

		/*
			step 2 of the algorithm
			all of the logic for this is correct, checked with
			a grammar and input of known correct answer.
	
			V: S, A, B, C
			T: a, b
			S: S
			P: 
			S -> AB|BC
			A -> BA|a
			B -> CC|b
			C -> AB|a
	
			and input: baaba
	
			correct output is:
			S A C : 
			S C A : 
			B : B : 
			S A : B : S C : S A : 
			B E : A C D : A C D : B E : A C D : 
		 */
		for(int i = 2; i <= n; i++)
		{
			for(int j = 1; j <= n - i + 1; j++)
			{
				for(int k = 1; k <= i - 1; k++)
				{
					for(State state : chomskyGrammar.getStates())
					{
						for(int h = 0; h < state.getDerivations().size(); h++)
						{
							if(state.getDerivations().get(h).length() == 2 && state.getDerivations().get(h).toUpperCase().equals(state.getDerivations().get(h)))
							{
								if(p[k][j].contains(state.getDerivations().get(h).charAt(0) + "") &&
										p[i-k][j+k].contains(state.getDerivations().get(h).charAt(1) + ""))
								{
									if(!p[i][j].contains(state.getNonTerminal()+""))
										p[i][j] = p[i][j] + state.getNonTerminal() + " ";
								}
							}
						}
					}
				}
			}	
		}

		//this is just for testing
		/*
		for(int i = n; i >= 0; i--) {
			System.out.print("\n");
			for(int j = 0; j <= n; j++) {
				if(p[i][j] != "")
					System.out.print(p[i][j] + ": ");
			}
		}
		 */

		//this is the final check, not quite sure how this works yet.
		if(p[n][1].contains(chomskyGrammar.getStartState().getNonTerminal() + ""))
		{
			return "\n\nCYK Result: The string can be generated by this grammar!\nThe combination decided by the CYK algorithm is: " + p[n][1];
		}
		else
			return "\n\nCYK Result: The given string cannot be generated by this grammar.";
	}

	/**
	 * @author Brian Hudi
	 * @param chomskyGrammar the grammar in chomsky normal form.
	 * @param input is the string that will be checked by the CYK algorithm.
	 * @return the grammar
	 */
	public String parseCKY(Grammar chomskyGrammar, String input)
	{	
		return checkInput(input, chomskyGrammar);
	}

}
